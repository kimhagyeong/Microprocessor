
/*
  ex07.1_ADC_1ch

  ADC peripheral 동작 확인.
  가변 저항의 값을 읽어 전압과 저항값을 출력한다.
 */

#include <stdio.h>
#include "stm32f4xx.h"
#include "led.h"
#include "llio.h"
#include "ADC_Init.h"
#include "delay.h"

#define HCSR04_TIMEOUT 1000000

float Distance;

void UART_Init(){
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

   
    
    // GPIO AF config
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

       // Configure GPIO(UART TX/RX)
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

        // Configure UART peripheral
    USART_InitStructure.USART_BaudRate   = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);

    USART_Cmd(USART1, ENABLE);
}

//out
void Init_GPIO_OUT() //PC3 Trigger
{
  GPIO_InitTypeDef GPIO_InitStructure;            
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3;                 
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;        
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;   
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;        
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;  
  GPIO_Init(GPIOC, &GPIO_InitStructure);       
  
  GPIO_ResetBits(GPIOC, GPIO_Pin_3);
}

//In  //PC2  Echo
void Init_GPIO_IN()
{
  GPIO_InitTypeDef GPIO_InitStructure;            
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_2;                 
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;        
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;   
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;        
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;  
  GPIO_Init(GPIOC, &GPIO_InitStructure);       
}


//PC8 Trigger, PA9 Echo
float UltraSonic_HCSR04_Read(){
  uint32_t time = 0;
  uint32_t timeout = HCSR04_TIMEOUT;
  
  GPIO_ResetBits(GPIOC, GPIO_Pin_3);
  delay_us(2);
  GPIO_SetBits(GPIOC, GPIO_Pin_3);
  delay_us(10);
  GPIO_ResetBits(GPIOC, GPIO_Pin_3);
  
  while(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_2)){
      if(timeout-- == 0)
        return -1;
  }
  
  while(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_2)){
      if(time++ >= 5000) break;
      delay_us(1);
  }
  
  Distance = (float)time / 58.0; //distance (cm)
  
  return Distance;
}

int main()
{
    
    char c;
    Init_GPIO_IN();
    Init_GPIO_OUT();
   
    UART_Init();
    LED_Init();
    LED_R_ON();

   
     LLIO_Init(115200);
    printf("\r\nADC Test\r\n");


    SystemCoreClockUpdate();
    if (SysTick_Config(SystemCoreClock / 20))   // 20Hz tick interrupt
    {
        assert_param(0);
    }

    while(1)
    {
        __WFI();

    
          
       
        if(UltraSonic_HCSR04_Read() == -1) {
            printf("%s\r\n", "Error!");     // ADC 결과 읽어 출력
        } else{
                   printf("%s%f\r\n", "Distance : ", Distance);     // ADC 결과 읽어 출력
                    // printf("%s%.4f\r\n", "V : ", volt);
                       
                     c = USART_ReceiveData(USART1);  // read received data
                     USART_SendData(USART1, c);      // send back received data
                    // delay_ms(1000);
        }
          
    }

       
    

}

void SysTick_Handler(void)
{
    LED_G_TOGGLE();
}



