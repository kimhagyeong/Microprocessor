//받는 쪽

#include "stm32f4xx.h"
#include "llio.h"
#include "led.h"

#define TIMER_PRESCALER_FREQ        168000     // timer 입력 클력 1MHz
#define TIMER_FREQ                  1         // timer 반복 주기 50ms = 20Hz

void ChangeTimerFrequency_L(int freq);
void ChangeTimerFrequency_R(int freq);

char c;
char d = 'a';

void Init_GPIO_OUT_A(){  //B포트 4번핀
   //GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
  GPIO_InitTypeDef GPIO_InitStructure; 

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); 
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 

   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;    

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOB, &GPIO_InitStructure); 
    GPIOB -> BSRRH = GPIO_Pin_4;
}

void Init_GPIO_OUT_B(){  //B포트 5번핀
   //GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
  GPIO_InitTypeDef GPIO_InitStructure; 

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); 
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 

   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;    

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOB, &GPIO_InitStructure); 
    GPIOB -> BSRRH = GPIO_Pin_5;
}


void Init_GPIOforPulse_L(){  //A 포트 4번핀
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOA, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    GPIOA->BSRRH = GPIO_Pin_4;
}

void Init_GPIOforPulse_R(){  //A 포트 5번핀
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOA, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    GPIOA->BSRRH = GPIO_Pin_5;
}

void Init_GPIO_DriverEnable(){  //Motor driver enable or disable // E0
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRH = GPIO_Pin_0;  //초기 설정 ? motor driver enable 항상 enable 되어있음.
}

void Init_GPIO_StepMode0(){  //Step Mode 0 // E1
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
     
    GPIOE->BSRRL = GPIO_Pin_1;  //초기 설정
}

void Init_GPIO_StepMode1(){ //Step Mode 1 // E2
    
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRL = GPIO_Pin_2;  //초기설정
}

void Init_GPIO_Direction_Left(){ //Direction of left wheel //E3
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
            	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRL = GPIO_Pin_3;  //초기설정
}

void Init_GPIO_Direction_Right(){ //Direction of  right wheel //E4
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRH = GPIO_Pin_4; //초기설정
}

void Init_TimerForPulse(){   //모터 구동을 위한 펄스 생성용 타이머 Timer2
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / 100 - 1; 
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM2, ENABLE);
}

void Init_TimerForSensing(){  //IR LED 센싱을 위한 타이머 초기화 함수
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / 100 - 1; 
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM3, ENABLE);
}

void Timer2_Disable(){
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, DISABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / 100 - 1; 
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
    TIM_Cmd(TIM2, DISABLE);
}

void Timer3_Disable(){
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / 100 - 1; 
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);
    TIM_Cmd(TIM3, DISABLE);
}


void Init_USART(){
     GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    
    // Enable peripheral
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

    // Configure USART Interrupt
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    // GPIO AF config
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

    // Configure GPIO(UART TX/RX)
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9; //TX
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10; //RX
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure UART peripheral
    USART_InitStructure.USART_BaudRate   = 9600; //통신 속도
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);

    // Enable USART receive interrupt
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);

    USART_Cmd(USART1, ENABLE);
}

void USART1_IRQHandler(void)
{
    int combo = 1;
    if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)
    {
        d = USART_ReceiveData(USART1);
        if(d=='a'||d=='A') {
        ChangeTimerFrequency_L(1);
        ChangeTimerFrequency_R(1);
      }
      else if(d=='b'||d=='B') { //전진
        GPIOE->BSRRL = GPIO_Pin_3;
        GPIOE->BSRRH = GPIO_Pin_4;
        if(d=='B') combo = 3;
        ChangeTimerFrequency_L(300*combo);
        ChangeTimerFrequency_R(300*combo);
      }
      else if(d=='c'||d=='C') { //오른쪽 직진

        GPIOE->BSRRL = GPIO_Pin_3;
        GPIOE->BSRRH = GPIO_Pin_4;
        if(d=='C') combo = 3;
        ChangeTimerFrequency_L(300*combo);
        ChangeTimerFrequency_R(100*combo);
      }
      else if(d=='d'||d=='D') { //오른쪽으로 돔

        GPIOE->BSRRL = GPIO_Pin_3;
        GPIOE->BSRRH = GPIO_Pin_4;
        if(d=='D') combo = 3;
        ChangeTimerFrequency_L(300*combo);
        ChangeTimerFrequency_R(1);
      }
      else if(d=='e'||d=='E') { // 오른쪽 후진

        GPIOE->BSRRH = GPIO_Pin_3;
        GPIOE->BSRRL = GPIO_Pin_4;
        if(d=='E') combo = 3;
        ChangeTimerFrequency_L(300*combo);
        ChangeTimerFrequency_R(100*combo);
      }
      else if(d=='f'||d=='F') //후진
      {
        GPIOE->BSRRH = GPIO_Pin_3;
        GPIOE->BSRRL = GPIO_Pin_4;
        if(d=='F') combo = 3;
        ChangeTimerFrequency_L(300*combo);
        ChangeTimerFrequency_R(300*combo);
      }
      else if(d=='g'||d=='G')  { //왼쪽 후진

        GPIOE->BSRRH = GPIO_Pin_3;
        GPIOE->BSRRL = GPIO_Pin_4;
        if(d=='G') combo = 3;
        ChangeTimerFrequency_L(100*combo);
        ChangeTimerFrequency_R(300*combo);
      }
      else if(d=='h'||d=='H') { //왼쪽 돌기

        GPIOE->BSRRL = GPIO_Pin_3;
        GPIOE->BSRRH = GPIO_Pin_4;
        if(d=='H') combo = 3;
        ChangeTimerFrequency_L(1);
        ChangeTimerFrequency_R(300*combo);
      }
      else if(d=='i'||d=='I'){ //왼쪽 직진

        GPIOE->BSRRL = GPIO_Pin_3;
        GPIOE->BSRRH = GPIO_Pin_4;
        if(d=='I') combo = 3;
        ChangeTimerFrequency_L(100*combo);
        ChangeTimerFrequency_R(300*combo);
      }
    }
}


void ChangeTimerFrequency_L(int freq){//타이머 주기 실시간 변화
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / freq - 1;           // 20Hz timer
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM2, ENABLE);
}

void ChangeTimerFrequency_R(int freq){//타이머 주기 실시간 변화
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / freq - 1;           // 20Hz timer
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM3, ENABLE);
}

int i = 0;

void TIM2_IRQHandler(void) //Interrupt handler for Timer2
{
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        if(i%2==0){
          GPIOA->BSRRH = GPIO_Pin_4;
          GPIOB->BSRRL=GPIO_Pin_4;
        }
        else
        {
          GPIOA->BSRRL = GPIO_Pin_4;
          GPIOB->BSRRH=GPIO_Pin_4;
        }
        i = 1-i;
     }
    
    //펄스 생성
}

int j=0;

void TIM3_IRQHandler(void) //Interrupt handler for Timer3
{
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
    {
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
        if(j%2==0){
          GPIOA->BSRRH = GPIO_Pin_5;
          GPIOB->BSRRL=GPIO_Pin_5;
        }
        else
        {
          GPIOA->BSRRL = GPIO_Pin_5;
          GPIOB->BSRRH=GPIO_Pin_5;
        }
        j = 1-j;
     }
}

..int main()
{
  Init_GPIO_OUT_A();
  Init_GPIO_OUT_B();
  Init_GPIOforPulse_L();
  Init_GPIOforPulse_R();
  Init_GPIO_DriverEnable();
  Init_GPIO_StepMode0();
  Init_GPIO_StepMode1();
  Init_GPIO_Direction_Left();
  Init_GPIO_Direction_Right();
  Init_TimerForPulse();
  Init_TimerForSensing();
  
  LED_G_INIT();
  LED_G_OFF();
  Init_USART();
  //Init_TimerForSensing();
  
  
 //LLIO_Init(115200);
  //  printf("\r\nADC Test\r\n");
  
    while(1)
    {
      __WFI();
    }

}