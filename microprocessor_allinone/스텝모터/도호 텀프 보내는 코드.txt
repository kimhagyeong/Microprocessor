//보내는 쪽
#include <stdio.h>
#include "stm32f4xx.h"
#include "llio.h"

#define TIMER_PRESCALER_FREQ        168000     // timer 입력 클력 1MHz
#define TIMER_FREQ                  1         // timer 반복 주기 50ms = 20Hz

void Init_GPIO_IN()
{
    GPIO_InitTypeDef GPIO_InitStructure; //GPIO 셋팅(Pin, Mode, PuPd, OType, Speed)과 관련된 구조체

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);    //E 포트를 사용 가능하게 해줌
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; //GPIO Pin 3번을 사용 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; //In모드를 사용 - 이것들이 클래스 안에 따로 있는걸 사용인 것 같음.

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; // Pull-up, Pull-Down을 설정    - PULL을 주지 않음.
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; // Speed를 설정. 100MHz 최대

    GPIO_Init(GPIOB, &GPIO_InitStructure);  // E포트의 GPIO 설정을, GPIO_InitStructre와 같이 초기화시킴
}

void Init_GPIO_gSelect1(){  //E0, GPIO for g-Select 1
       GPIO_InitTypeDef GPIO_InitStructure;                               
            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);                   
            GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0;                      
            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;                      
            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;                   
            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;                      
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;                  
            GPIO_Init(GPIOE, &GPIO_InitStructure);                     
            GPIOE -> BSRRH = GPIO_Pin_0; //initial output signal -> 1
}

void Init_GPIO_gSelect2(){  //E1, GPIO for g-Select 2
            GPIO_InitTypeDef GPIO_InitStructure;                               
            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);                   
            GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_1;                      
            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;                      
            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;                   
            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;                      
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;                  
            GPIO_Init(GPIOE, &GPIO_InitStructure);                     
            GPIOE -> BSRRH = GPIO_Pin_1;  //initial output signal -> 0
}

void Init_GPIO_SleepMode(){  //E2, GPIO for Sleep mode
      GPIO_InitTypeDef GPIO_InitStructure;                               
            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);                   
            GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_2;                      
            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;                      
            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;                   
            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;                      
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;                  
            GPIO_Init(GPIOE, &GPIO_InitStructure);                     
            GPIOE -> BSRRL = GPIO_Pin_2;      //initial output signal -> 0
}

void Init_TimerForSensing(){  //가속도 센서의 x, y, z 출력값을 얻기위한 타이머 초기화 함수, TIM3
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / 50 - 1;           
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM3, ENABLE);
}

void Init_ADC1(){  //가속도 센서의 x -> ADC 1
    GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;     
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);

    /* ADC channel 10 (PC0) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);

    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC1, &ADC_InitStructure);

    /* ADC1 regular channel10 configuration */
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_3Cycles);

    /* Enable ADC1 */
    ADC_Cmd(ADC1, ENABLE);
}
void Init_ADC2(){  //가속도 센서의 y -> ADC 2
   //ADC2, C 포트 2번핀, 해상도 12bit, 채널 12
   GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;     
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);

    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC2, &ADC_InitStructure);

    /* ADC1 regular channel10 configuration */
    ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);

    /* Enable ADC1 */
    ADC_Cmd(ADC2, ENABLE);
}
void Init_ADC3(){  //가속도 센서의 z -> ADC 3
   //ADC3, C 포트 3번핀, 해상도 12bit, 채널 13
   GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;     
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);

    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);

    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC3, &ADC_InitStructure);

    /* ADC1 regular channel10 configuration */
    ADC_RegularChannelConfig(ADC3, ADC_Channel_10, 1, ADC_SampleTime_3Cycles);

    /* Enable ADC1 */
    ADC_Cmd(ADC3, ENABLE);
}

void Init_USART(){
     GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    
    // Enable peripheral
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

    // Configure USART Interrupt
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    // GPIO AF config
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

    // Configure GPIO(UART TX/RX)
    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9; //TX
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10; //RX
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure UART peripheral
    USART_InitStructure.USART_BaudRate   = 9600; //통신 속도
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

    USART_Init(USART1, &USART_InitStructure);

    // Enable USART receive interrupt
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);

    USART_Cmd(USART1, ENABLE);
}

unsigned int adc_x = 0;  //ADC value from ADC1
unsigned int adc_y = 0; //ADC value from ADC2
unsigned int adc_z = 0; //ADC value from ADC3


char c;

int main()
{
    Init_GPIO_IN();
    Init_GPIO_gSelect1();
    Init_GPIO_gSelect2();
    Init_GPIO_SleepMode();
    Init_TimerForSensing();
    Init_ADC1();
    Init_ADC2();
    Init_ADC3();
    Init_USART();
 
    printf("\r\nADC Test\r\n");
    //c = 'a';

    while(1)
    {
       __WFI(); //Wait for interrupt의 약자임.
       
        
       printf("x, y, z : %d, %d, %d %c\r\n", adc_x,adc_y,adc_z,c);     // ADC 결과 읽어 출력 ? UART ? ComportMaster
    }
}

void TIM3_IRQHandler(void) //Interrupt handler for Timer3
{
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
    {
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
        
        ADC_SoftwareStartConv(ADC1);  
        ADC_SoftwareStartConv(ADC2);  
        ADC_SoftwareStartConv(ADC3);  

        if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_x = ADC_GetConversionValue(ADC1);
        }
        if (ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_y = ADC_GetConversionValue(ADC2);
        }
        if (ADC_GetFlagStatus(ADC3, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_z = ADC_GetConversionValue(ADC3);
        }
        
        if(adc_x>1800&& adc_x<2200)
        {
          if(1800<adc_y&&adc_y<2200) //가만히
            {
              c = 'a';
            }
            else if(2500<adc_y&&adc_y<3000) //전진
            {
              c = 'b';
            }
            else if(1000<adc_y&&adc_y<1500) //후진
            {
              c = 'f';
            }
        }
        
        else if(adc_x>2500) {
            if(1800<adc_y&&adc_y<2200) //오른쪽으로 돔
            {
              c = 'd';
            }
            else if(2500<adc_y&&adc_y<3000) //오른쪽 직진
            {
              c = 'c';
            }
            else if(1000<adc_y&&adc_y<1700) //왼쪽 후진
            {
              c = 'e';
            }
        }
        
        else if(adc_x<1700){
            if(1800<adc_y&&adc_y<2200) //왼쪽 돌기
            {
              c = 'h';
            }
            else if(2500<adc_y&&adc_y<3000) //왼쪽 직진
            {
              c = 'i';
            }
            else if(1000<adc_y&&adc_y<1700) // 오른쪽 후진
            {
              c = 'g';
            }
        }
        
        if(!GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5)) 
        {
          c = c-32;
        }
        
        USART_SendData(USART1,c);
     }
}