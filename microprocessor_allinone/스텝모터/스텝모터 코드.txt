#include <stdio.h>
#include "stm32f4xx.h"
#include "led.h"
#include "llio.h"

#define TIMER_PRESCALER_FREQ        168000     // timer 입력 클력 1MHz
#define TIMER_FREQ                  1         // timer 반복 주기 50ms = 20Hz

void ChangeTimerFrequency(int freq); //타이머 주기 변경 함수 

void Init_GPIOforPulse(){  //A 포트 4번핀
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOA, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    GPIOA->BSRRH = GPIO_Pin_4;
}

void Init_GPIO_DriverEnable(){  //Motor driver enable or disable // E0
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRH = GPIO_Pin_0;  //초기 설정 ? motor driver enable 항상 enable 되어있음.
}

void Init_GPIO_StepMode0(){  //Step Mode 0 // E1
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
     
    GPIOE->BSRRH = GPIO_Pin_1;  //초기 설정
}

void Init_GPIO_StepMode1(){ //Step Mode 1 // E2
    
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRH = GPIO_Pin_2;  //초기설정
}

void Init_GPIO_Direction_Left(){ //Direction of left wheel //E3
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
            	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRH = GPIO_Pin_3;  //초기설정
}

void Init_GPIO_Direction_Right(){ //Direction of  right wheel //E4
  
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);    
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
    
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 

    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
	//GPIO 초기화 코드, output 모드, nopull, gpio speed : 50MHz
    
    GPIOE->BSRRH = GPIO_Pin_4; //초기설정
}

void Init_TimerForPulse(){   //모터 구동을 위한 펄스 생성용 타이머 Timer2
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / TIMER_FREQ - 1; 
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM2, ENABLE);
}

void Init_TimerForSensing(){  //IR LED 센싱을 위한 타이머 초기화 함수
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0e;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / 10 - 1;           
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM3, ENABLE);
}

void Init_ADC1(){  //phototransistor용 ADC 1 //ADC1, C 포트 0번핀, 해상도 12bit, 채널 10
    GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    
     /* Enable ADC1 and GPIOC clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    
    /* ADC Common Init */
    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent; 

    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
    
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled; 
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure); 
    
    /* ADC channel 10 (PC0) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    
    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b; 
    ADC_InitStructure.ADC_ScanConvMode = DISABLE; 
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; 
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;  
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;

    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC1, &ADC_InitStructure);
    
    /* ADC1 regular channel10 configuration */
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_3Cycles); 
    
    /* Enable ADC1 */
    ADC_Cmd(ADC1, ENABLE); //ADC 가동
	
}
void Init_ADC2(){  //phototransistor용 ADC 2 	//ADC2, C 포트 2번핀, 해상도 12bit, 채널 12
    
    GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    
     /* Enable ADC2 and GPIOC clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    
    /* ADC Common Init */
    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent; 

    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
    
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled; 
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure); 
    
    /* ADC channel 12 (PC2) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    
    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b; 
    ADC_InitStructure.ADC_ScanConvMode = DISABLE; 
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; 
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;  
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;

    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC2, &ADC_InitStructure);
    
    /* ADC2 regular channel10 configuration */
    ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 1, ADC_SampleTime_3Cycles); 
    
    /* Enable ADC2 */
    ADC_Cmd(ADC2, ENABLE); //ADC 가동
  

}
void Init_ADC3(){  //phototransistor용 ADC 3	  //ADC3, C 포트 3번핀, 해상도 12bit, 채널 13
  
    GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    
     /* Enable ADC3 and GPIOC clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    
    /* ADC Common Init */
    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent; 

    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
    
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled; 
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure); 
    
    /* ADC channel 13 (PC3) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3; 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    
    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b; 
    ADC_InitStructure.ADC_ScanConvMode = DISABLE; 
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; 
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;  
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;

    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC3, &ADC_InitStructure);
    
    /* ADC3 regular channel13 configuration */
    ADC_RegularChannelConfig(ADC3, ADC_Channel_13, 1, ADC_SampleTime_3Cycles); 
    
    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE); //ADC 가동
  
  

}

unsigned short adc_x = 0;  //ADC value from ADC1
unsigned short adc_y = 0; //ADC value from ADC2
unsigned short adc_z = 0; //ADC value from ADC3



int flag = 0;

int main()
{
    Init_GPIOforPulse();
    Init_GPIO_DriverEnable();
    Init_GPIO_StepMode0();
    Init_GPIO_StepMode1();
    Init_GPIO_Direction_Left();
    Init_GPIO_Direction_Right();
    Init_TimerForPulse();
    Init_TimerForSensing();
    Init_ADC1();
    Init_ADC2();
    Init_ADC3();
    LLIO_Init(115200);
    printf("\r\nADC Test\r\n");


    while(1)
    {
       __WFI(); //타이머 인터럽트 발생시키는 얘
       
        ADC_SoftwareStartConv(ADC1);  
        ADC_SoftwareStartConv(ADC2);  
        ADC_SoftwareStartConv(ADC3);  

        if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_x = ADC_GetConversionValue(ADC1);
        }
        if (ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_y = ADC_GetConversionValue(ADC2);
        }
        if (ADC_GetFlagStatus(ADC3, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_z = ADC_GetConversionValue(ADC3);
        }
       printf("x, y, z : %d, %d, %d, %d r\n", adc_x,adc_y,adc_z, flag);     // ADC 결과 읽어 출력 ? UART ? ComportMaster
       
       
    }
}

void ChangeTimerFrequency(int freq){//타이머 주기 실시간 변화
    uint16_t PrescalerValue;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    SystemCoreClockUpdate();
    PrescalerValue = (uint16_t) (SystemCoreClock / TIMER_PRESCALER_FREQ) - 1;
    TIM_TimeBaseStructure.TIM_Period = TIMER_PRESCALER_FREQ / freq - 1;           // 20Hz timer
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    TIM_Cmd(TIM2, ENABLE);
}

int i = 0;

void TIM2_IRQHandler(void) //Interrupt handler for Timer2
{
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        if(i%2==0){
          GPIOA->BSRRH = GPIO_Pin_4;
        }
        else
        {
          GPIOA->BSRRL = GPIO_Pin_4;
        }
        i = 1-i;
     }
    
    //펄스 생성
}

int count = 0;

void TIM3_IRQHandler(void) //Interrupt handler for Timer3
{
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
    {
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update) ;

        if(adc_x<1000||adc_y<1000||adc_z<1000) GPIOE->BSRRL = GPIO_Pin_0;
        if(adc_x<1000) count++;
        if(adc_y<1000) count++;
        if(adc_z<1000) count++;
        
        
        ChangeTimerFrequency(count*6000); //타이머 주기 변화     
        if(count==0) GPIOE->BSRRH = GPIO_Pin_0;
        count =0;
          
     }
}