
/*
  ex07.1_ADC_1ch

  ADC peripheral 동작 확인.
  가변 저항의 값을 읽어 전압과 저항값을 출력한다.
 */

#include <stdio.h>
#include "stm32f4xx.h"
#include "led.h"
#include "llio.h"

void Init_ADC(){
  //ADC는 Analog Digital Converter로써, 아날로그 값을 마이크로 컨트롤러에서 디지털로 변환시키는 회로 또는 모듈을 말한다,
  //즉 아날로그 값(전압)을 이진화(디지털화)시키는 것이다.
  //ADC는 12, 10, 8, 6비트로 설정이 가능하며, 최대 3.3V까지 이진화시킬수 있다.
  //때문에 12Bit ADC를 사용하면, 3.3V = 4095로 표현이 된다.
  //ADC는 총 19개의 채널을 가지고 있으며, 이중 16개는 외부 소스에서 받아들이도록 사용되고, 2개는 내부 소스, 1개는 V Bat채널이다.
  // 온도센서 전용으로도 사용되는게 있는데, ADC1_IN16이라고 명시되어있고,  REF Voltage는 ADC1_IN17이다.
  
    GPIO_InitTypeDef GPIO_InitStructure;
    ADC_InitTypeDef ADC_InitStructure;
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    //위의 세가지 구조체는 GPIO, ADC의 구조체이다.
    
     /* Enable ADC1 and GPIOC clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    //ADC 1은 APB2를 사용한다. 또한 ADC1은 GPIOC에 있으니, 두개를 동시에 클락 셋팅을 해줘야한다.
    
    /* ADC Common Init */
    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent; 
    // Independent모드와 Dual mode로 나뉘어짐 Independent 모든 핀 하나를 사용할때 쓰고, Dual 모드는 두개의 ADC를 동시에 사용할때 씀
    //Dual Mode에서 Master는 ADC1, ADC2는 Slave로 설정됨 마찬가지로 Dual로 쓰기 위해서는 ADC2를 초기화시켜줘야함. ADC3은 오로지 Independent mode로 동작함. 
     
    // HCLK = 168MHz
    // PCLK2 = HCLK /2
    // ADCCLK = PCLK2/2 (Default ADC prescaler)
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4; // ADC clock = PCLK2/prescaler. ADC freq = typical 30MHz, Max 36MHz. PCLK2 = 168/2=84MHz.
    
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled; // DMA를 사용할 것인가 안할것인가?
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles; // ADC 샘플링 간격을 설정한다. 5~20사이클까지 있다. 5사이클이 가장 짧다.
    ADC_CommonInit(&ADC_CommonInitStructure); //  ADC를 초기화시킴
    
    /* ADC channel 10 (PC0) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; // ADC1, 0은 PC0이므로, 이또한 초기화시킴.
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // 여기서 speed를 더 빠르게 하면 출력되는 Digital 값이 더 부드럽게 나올것으로 예상됨.(Sampling rate와 약간 연관성이 있음.)
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    
    /* ADC channel configuration */
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b; // ADC 분해능 설정. 12, 10, 8, 6으로 나뉨
    ADC_InitStructure.ADC_ScanConvMode = DISABLE; // ScanConvMode란 멀티 채널을 사용할지 여부를 확인하는건데, 현재는 크게 필요없으므로 하나만 사용.
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; // Continuous 와 Single 모드를 사용할것인지에 대한 설정, Single 모드 선택
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;  
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    
    //Specifying whether the ADC data is "Left" or "Right" aligned in the Data register
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    //Specifying the number of conversions that will be done using the sequencer for regular channel group
    //The number of Conversions can vary from 1-16
    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC1, &ADC_InitStructure);
    
    /* ADC1 regular channel10 configuration */
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_3Cycles); //ADC_SampleTime 은 [3,15,28,56,84,112,144,480] 사이클이 가능함.
    /* Enable ADC1 */
    ADC_Cmd(ADC1, ENABLE); //ADC 가동
}

int main()
{
    unsigned short adc_result;
    float volt;
    int resistor;

    LED_Init();
    LED_R_ON();
    Init_ADC();

    LLIO_Init(115200);
    printf("\r\nADC Test\r\n");


    SystemCoreClockUpdate();
    if (SysTick_Config(SystemCoreClock / 20))   // 20Hz tick interrupt
    {
        assert_param(0);
    }

    while(1)
    {
        __WFI();

        ADC_SoftwareStartConv(ADC1);                            // ADC 시작

        if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET)       // ADC 완료까지 대기
        {
            adc_result = ADC_GetConversionValue(ADC1);
            volt = (float)adc_result * 3.3 / 4096.;
            resistor = adc_result * 10000 / 4096;
            printf("%d,%.2f,%d\r\n", adc_result, volt, resistor);     // ADC 결과 읽어 출력
        }
    }

}

void SysTick_Handler(void)
{
    LED_G_TOGGLE();
}



